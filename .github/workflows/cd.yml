name: CD
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation
    steps:
      - uses: actions/checkout@v4

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Deploy Terraform Infrastructure
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          terraform -chdir=infra init
          
          # Run import script to handle existing resources
          chmod +x scripts/check_and_import_resources.sh
          ./scripts/check_and_import_resources.sh || echo "Some imports failed, continuing with apply..."
          
          terraform -chdir=infra apply -auto-approve
          
      - name: Get Terraform outputs
        id: terraform-outputs
        run: |
          echo "receipt_bucket=$(terraform -chdir=infra output -raw receipt_bucket)" >> $GITHUB_OUTPUT
          echo "functions_sa=$(terraform -chdir=infra output -raw functions_sa_email)" >> $GITHUB_OUTPUT
          echo "hosting_site_id=$(terraform -chdir=infra output -raw hosting_site_id)" >> $GITHUB_OUTPUT

      - name: Deploy backend functions
        env:
          REGION: us-central1
          RECEIPT_BUCKET: ${{ steps.terraform-outputs.outputs.receipt_bucket }}
          FUNCTIONS_SA: ${{ steps.terraform-outputs.outputs.functions_sa }}
        run: ./scripts/deploy_backend.sh --env prod

      - uses: subosito/flutter-action@v2
        with: 
          channel: stable
          
      - name: Build Flutter web app
        working-directory: frontend
        run: |
          flutter pub get
          flutter build web --release

      - name: Deploy to Firebase Hosting (using ADC)
        env:
          # Firebase CLI will use Application Default Credentials from google-github-actions/auth
          HOSTING_SITE_ID: ${{ steps.terraform-outputs.outputs.hosting_site_id }}
        run: |
          npm i -g firebase-tools
          # Copy Flutter build to hosting directory
          mkdir -p build/web
          cp -r frontend/build/web/* build/web/
          # Deploy using ADC (no token needed)
          firebase use ${{ secrets.GCP_PROJECT_ID }}
          firebase deploy --only hosting:$HOSTING_SITE_ID
